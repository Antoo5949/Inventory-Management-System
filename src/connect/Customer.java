/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package connect;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Antoo
 */
public class Customer extends javax.swing.JFrame {

    /**
     * Creates new form Routine
     */
    public Customer() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        back = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Category_table = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        product_table = new javax.swing.JTable();
        productbox = new javax.swing.JComboBox<>();
        product_search = new javax.swing.JButton();
        categorybox = new javax.swing.JComboBox<>();
        category_search = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer Name", "Product Name", "Category Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        back.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        back.setIcon(new javax.swing.ImageIcon("C:\\Users\\ankur\\OneDrive\\Documents\\NetBeansProjects\\Connect\\icons\\icons8-left-arrow-50.png")); // NOI18N
        back.setText("Go Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        Category_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Category", "Total Customer"
            }
        ));
        jScrollPane2.setViewportView(Category_table);

        product_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Name", "Total Number of order"
            }
        ));
        jScrollPane3.setViewportView(product_table);

        productbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productboxActionPerformed(evt);
            }
        });

        product_search.setText("search");
        product_search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                product_searchMouseClicked(evt);
            }
        });
        product_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                product_searchActionPerformed(evt);
            }
        });

        categorybox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryboxActionPerformed(evt);
            }
        });

        category_search.setText("search");
        category_search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                category_searchMouseClicked(evt);
            }
        });
        category_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                category_searchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(back)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 477, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 99, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(productbox, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(42, 42, 42)
                                .addComponent(product_search)))
                        .addGap(85, 85, 85))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(categorybox, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(60, 60, 60)
                                .addComponent(category_search)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(back)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(productbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(product_search))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(114, 114, 114)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(categorybox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(category_search))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(177, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
        Initialization initialization= new Initialization();
        initialization.setVisible(true);
        dispose();
    }//GEN-LAST:event_backActionPerformed

    private void productboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productboxActionPerformed
        // TODO add your handling code here:
          DefaultTableModel tblmodel=(DefaultTableModel) product_table.getModel();
        tblmodel.setRowCount(0);
        
        
    }//GEN-LAST:event_productboxActionPerformed

    private void product_searchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_product_searchMouseClicked
        // TODO add your handling code here:
         DefaultTableModel tblmodel=(DefaultTableModel) product_table.getModel();
        tblmodel.setRowCount(0);
        product_wise_order();
        
        
    }//GEN-LAST:event_product_searchMouseClicked

    private void categoryboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryboxActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tblmodel=(DefaultTableModel) Category_table.getModel();
        tblmodel.setRowCount(0);
    }//GEN-LAST:event_categoryboxActionPerformed

    private void product_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_product_searchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_product_searchActionPerformed

    private void category_searchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_category_searchMouseClicked
        // TODO add your handling code here:
        DefaultTableModel tblmodel=(DefaultTableModel) Category_table.getModel();
        tblmodel.setRowCount(0);
        show_categorywise_order();
    }//GEN-LAST:event_category_searchMouseClicked

    private void category_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_category_searchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_category_searchActionPerformed

    /**
     * @param args the command line arguments
     */
    public Connection connection;
   public void show_customer() {
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            connection = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=Inventory;selectMethod=cursor", "sa", "123456");

            System.out.println("DATABASE NAME IS:" + connection.getMetaData().getDatabaseProductName());

            Statement statement = connection.createStatement();
            String sql="SELECT     Customer.First_Name,  Products.Product_Name, Category.Category_Name\n" +
"FROM [Order] INNER JOIN\n" +
"                      Customer ON [Order].Customer_id = Customer.Customer_id INNER JOIN\n" +
"                      Order_Detail ON [Order].Order_id = Order_Detail.Order_id INNER JOIN\n" +
"                      Products ON Order_Detail.Product_id = Products.Product_Id INNER JOIN\n" +
"                      Category ON Products.Category_id = Category.Category_id  ;         ";
            
            
            ResultSet resultSet = statement
                    .executeQuery(sql);

            while (resultSet.next()) {
                
                String Customer_Name = resultSet.getString(1);
                String Products_Name = resultSet.getString(2);
                String Category = resultSet.getString(3);
               
                
                String tbdata[]={Customer_Name,Products_Name,Category};
                
                DefaultTableModel tblmodel=(DefaultTableModel) jTable1.getModel();
                tblmodel.addRow(tbdata);
                System.out.println(tblmodel);
                
                
                 
                 
                
              

            }
            
              connection.close();

        } catch (Exception e) {
            e.printStackTrace();
        }

    }
  public void show_categorywise_order() {
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            connection = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=Inventory;selectMethod=cursor", "sa", "123456");

            System.out.println("DATABASE NAME IS:" + connection.getMetaData().getDatabaseProductName());
             String sql="                    SELECT     Category.Category_Name, COUNT(Customer.Customer_id) AS [ Total Customer ]\n" +
"FROM[Order] INNER JOIN\n" +
"                      Customer ON [Order].Customer_id = Customer.Customer_id INNER JOIN\n" +
"                      Order_Detail ON [Order].Order_id = Order_Detail.Order_id INNER JOIN\n" +
"                      Products ON Order_Detail.Product_id = Products.Product_Id INNER JOIN\n" +
"                      Category ON Products.Category_id = Category.Category_id\n" +
"GROUP BY Category.Category_Name "
                    + "having Category.Category_Name=?";

            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setString(1, categorybox.getSelectedItem().toString());
            
            
            ResultSet resultSet = statement
                    .executeQuery();
            

            while (resultSet.next()) {
                
               
                String Category = resultSet.getString(1);
                String Total_Customer=resultSet.getString(2);
               
                
                String tbdata[]={Category,Total_Customer};
                
                DefaultTableModel tblmodel=(DefaultTableModel) Category_table.getModel();
                tblmodel.addRow(tbdata);
                System.out.println(tblmodel);
                
                
                 
                 
                
              

            }
            
              connection.close();

        } catch (Exception e) {
            e.printStackTrace();
        }

    }
  
   public void product_wise_order() {
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            connection = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=Inventory;selectMethod=cursor", "sa", "123456");

            System.out.println("DATABASE NAME IS:" + connection.getMetaData().getDatabaseProductName());
              String sql="SELECT Products.Product_Name, COUNT(dbo.Customer.Customer_id) AS "
                    + "[Total Number of Order]\n" +
"FROM[Order] INNER JOIN\n" +
"                      Customer ON [Order].Customer_id = Customer.Customer_id INNER JOIN\n" +
"                      Order_Detail ON [Order].Order_id = Order_Detail.Order_id INNER JOIN\n" +
"                      Products ON Order_Detail.Product_id = Products.Product_Id INNER JOIN\n" +
"                      Category ON Products.Category_id = Category.Category_id\n" +
"GROUP BY Products.Product_Name "
                    + "having  Products.Product_Name=?";

            PreparedStatement statement = connection.prepareStatement(sql);
          
            
            statement.setString(1, productbox.getSelectedItem().toString());
            ResultSet resultSet = statement
                    .executeQuery();
            
            

            while (resultSet.next()) {
                
               
                String product_name = resultSet.getString(1);
                String Total_number_of_order=resultSet.getString(2);
               
                
                String tbdata[]={product_name,Total_number_of_order};
                
                DefaultTableModel tblmodel=(DefaultTableModel) product_table.getModel();
                tblmodel.addRow(tbdata);
                System.out.println(tblmodel);
                
                
                 
                 
                
              

            }
            
              connection.close();

        } catch (Exception e) {
            e.printStackTrace();
        }

    }
   public void add_Category(){
        Add_Category c= new Add_Category();
       
        for(String namess:c.names){
        
          categorybox.addItem(namess);
        }
        categorybox.setSelectedIndex(-1);   
    }
   
    public void add_Product(){
        Products p =new Products();
       
        for(String namess:p.names){
        
          productbox.addItem(namess);
        }
        productbox.setSelectedIndex(-1);   
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Category_table;
    private javax.swing.JButton back;
    private javax.swing.JButton category_search;
    private javax.swing.JComboBox<String> categorybox;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton product_search;
    private javax.swing.JTable product_table;
    private javax.swing.JComboBox<String> productbox;
    // End of variables declaration//GEN-END:variables
}
